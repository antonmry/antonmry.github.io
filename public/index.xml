<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>errors.New(&#34;antonmry: blog&#34;)</title>
    <link>https://antonmry.github.io/</link>
    <description>Recent content on errors.New(&#34;antonmry: blog&#34;)</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <managingEditor>antonmry@galiglobal.com (Ant贸n R. Yuste)</managingEditor>
    <webMaster>antonmry@galiglobal.com (Ant贸n R. Yuste)</webMaster>
    <lastBuildDate>Mon, 09 Jan 2017 18:21:15 +0100</lastBuildDate>
    <atom:link href="https://antonmry.github.io/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>How to persist your configuration in GKE</title>
      <link>https://antonmry.github.io/post/how-to-persist-your-configuration-in-gke/</link>
      <pubDate>Mon, 09 Jan 2017 18:21:15 +0100</pubDate>
      <author>antonmry@galiglobal.com (Ant贸n R. Yuste)</author>
      <guid>https://antonmry.github.io/post/how-to-persist-your-configuration-in-gke/</guid>
      <description>

&lt;p&gt;In my previous post, &lt;a href=&#34;https://antonmry.github.io/post/deploy-on-kubernetes-gke-with-terraform/&#34;&gt;Deploy on Kubernetes GKE with Terraform&lt;/a&gt;, we&amp;rsquo;ve seen how to start to use kubernetes but in a very simple way. The next thing we would like to do is persist the configuration, so we don&amp;rsquo;t need to reconfigure our bot each time we start the cluster. This post explain how to do it from the configuration created in the previous one.&lt;/p&gt;

&lt;p&gt;Again we&amp;rsquo;ll use &lt;a href=&#34;https://github.com/antonmry/leanmanager&#34;&gt;Leanmanager bot&lt;/a&gt; but everything applies to any other system which needs to store configuration or data in a database. In the case of &lt;a href=&#34;https://github.com/antonmry/leanmanager&#34;&gt;Leanmanager&lt;/a&gt; we are using &lt;a href=&#34;https://github.com/boltdb/bolt&#34;&gt;Boltdb&lt;/a&gt;, a pure Go key/value store. &lt;a href=&#34;https://github.com/boltdb/bolt&#34;&gt;Boltdb&lt;/a&gt; is great for development but it doesn&amp;rsquo;t support to have more than one process opening the same database file, so it may be problematic if we want to have more than one Docker instance at the same time. Yet it&amp;rsquo;s enough for our purposes and the process is similar for &lt;a href=&#34;https://www.consul.io/&#34;&gt;Consul&lt;/a&gt; which it&amp;rsquo;s already in the Roadmap.&lt;/p&gt;

&lt;h2 id=&#34;create-your-persistent-disks&#34;&gt;Create your persistent disks&lt;/h2&gt;

&lt;p&gt;If we want to persist data, we are going to need a disk, that&amp;rsquo;s common sense. In GCE we can do it very easily:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;gcloud compute disks create --size 1GB leanmanager-disk
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;But again, we want to do it in an automated way with Terraform. Use the following file &lt;code&gt;leanmanager-disk.tf&lt;/code&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;variable &amp;quot;disk_name&amp;quot; {
  default = &amp;quot;leanmanager-disk&amp;quot;
}

resource &amp;quot;google_compute_disk&amp;quot; &amp;quot;default&amp;quot; {
name  = &amp;quot;${var.disk_name}&amp;quot;
  type  = &amp;quot;pd-ssd&amp;quot;
  zone = &amp;quot;${var.region}&amp;quot;
  size  = &amp;quot;1&amp;quot;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;If you want to know more about it, visit the &lt;a href=&#34;https://www.terraform.io/docs/providers/google/r/compute_disk.html&#34;&gt;Terraform Google_Compute_Disk reference documentation&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id=&#34;tell-the-container-about-the-disk&#34;&gt;Tell the container about the disk&lt;/h2&gt;

&lt;p&gt;In our previous post, we&amp;rsquo;ve launched the bot using &lt;code&gt;kubectl run&lt;/code&gt;. This is OK for simple configuration but if we need to have something more complex, it doesn&amp;rsquo;t scale. We can create a &lt;a href=&#34;http://kubernetes.io/docs/user-guide/pods/&#34;&gt;pod&lt;/a&gt;, a group of one or more containers, using a YAML file like this:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;apiVersion: v1
kind: Pod
metadata:
  name: leanmanager
  labels:
    name: leanmanager
spec:
  containers:
    - image: antonmry/leanmanager:latest
      name: leanmanager
      env:
        - name: LEANMANAGER_TOKEN
          value: LEANMANAGER_TOKEN_TEMPLATE
        - name: LEANMANAGER_PATHDB
          value: /mnt
      volumeMounts:
          # This name must match the volumes.name below.
        - name: leanmanager-persistent-storage
          mountPath: /mnt
  volumes:
    - name: leanmanager-persistent-storage
      gcePersistentDisk:
        # This disk must already exist.
        pdName: leanmanager-disk
        fsType: ext4
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The file is auto-explanatory except the value &lt;code&gt;LEANMANAGER_TOKEN_TEMPLATE&lt;/code&gt;. I don&amp;rsquo;t want to hardcode the Token here because the file will be uploaded to Github. Instead of that, I want to use my local environment variable LEANMANAGER_TOKEN but this isn&amp;rsquo;t supported yet in K8s, see &lt;a href=&#34;http://stackoverflow.com/questions/33478555/kubernetes-equivalent-of-env-file-in-docker&#34;&gt;Kubernetes equivalent of env-file in Docker&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;So I&amp;rsquo;ve created a YAML template and in the Terraform file changed the last &lt;code&gt;local-exec&lt;/code&gt; to:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;  provisioner &amp;quot;local-exec&amp;quot; {
    command = &amp;quot;cp leanmanager-pod-template.yaml leanmanager.tmp.yaml &amp;amp;&amp;amp; sed -i -- &#39;s/LEANMANAGER_TOKEN_TEMPLATE/${var.LEANMANAGER_TOKEN}/g&#39; leanmanager.tmp.yaml&amp;quot;
  }

  provisioner &amp;quot;local-exec&amp;quot; {
    command = &amp;quot;kubectl create -f leanmanager.tmp.yaml&amp;quot;
  }

  provisioner &amp;quot;local-exec&amp;quot; {
    command = &amp;quot;rm -f leanmanager.tmp.yaml&amp;quot;
  }
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Basically, I&amp;rsquo;m replacing strings with &lt;code&gt;sed&lt;/code&gt;. Other more sophisticate approaches are possible as K8s secrets or Ansible, but this is simple and enough for the task we want to do.&lt;/p&gt;

&lt;h2 id=&#34;create-the-pod-and-test&#34;&gt;Create the pod and test&lt;/h2&gt;

&lt;p&gt;Time to create the cluster and the pod:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;terraform plan
terraform apply -var LEANMANAGER_TOKEN=$LEANMANAGER_TOKEN
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The bot should connect. Now we can do some changes in the configuration, delete the pod:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;kubectl delete pod leanmanager
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Create it again:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;kubectl create -f leanmanager.yaml
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;And check the status with the following commands and, once it&amp;rsquo;s in &lt;em&gt;Running&lt;/em&gt; state, see if everything has been persisted:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;kubectl get pod leanmanager
kubectl logs leanmanager
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;conclusion&#34;&gt;Conclusion&lt;/h2&gt;

&lt;p&gt;Persist data in Kubernetes is quite easy, even if you are going to do it automatically.&lt;/p&gt;

&lt;p&gt;If you want to check all the files, the full project and the associated PR are in &lt;a href=&#34;https://github.com/antonmry/leanmanager/pull/27/commits/ffea981b5deca5376b7bb8de1ed797da9aa282b0&#34;&gt;Github&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id=&#34;not-already-linked-but-useful-resources&#34;&gt;Not already linked but useful resources&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://kubernetes.io/docs/user-guide/persistent-volumes/&#34;&gt;Kubernetes persistent volumes&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://cloud.google.com/container-engine/docs/tutorials/persistent-disk/&#34;&gt;Using Persistent Disks with WordPress and MySQL&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>Deploy on kubernetes GKE with Terraform</title>
      <link>https://antonmry.github.io/post/deploy-on-kubernetes-gke-with-terraform/</link>
      <pubDate>Fri, 06 Jan 2017 22:37:18 +0100</pubDate>
      <author>antonmry@galiglobal.com (Ant贸n R. Yuste)</author>
      <guid>https://antonmry.github.io/post/deploy-on-kubernetes-gke-with-terraform/</guid>
      <description>

&lt;p&gt;Writing a new post after six months and in Christmas&amp;hellip; New year, new promises, old projects. I&amp;rsquo;ve been quite busy the second half of 2016, but also very happy and satisfied with some personal and professional projects. No more excuses and let&amp;rsquo;s focus in this post.&lt;/p&gt;

&lt;h2 id=&#34;introduction&#34;&gt;Introduction&lt;/h2&gt;

&lt;p&gt;I want to deploy my &lt;a href=&#34;https://hub.docker.com/r/antonmry/leanmanager&#34;&gt;leanmanager Docker image&lt;/a&gt; so the bot is available all the time for the team, but you can choose any Docker image you want to use. I want to use &lt;a href=&#34;https://cloud.google.com/container-engine/docs/quickstart&#34;&gt;Google Container Engine&lt;/a&gt; Kubernetes implementation and do it everything as much automatic as possible using Terraform.&lt;/p&gt;

&lt;h2 id=&#34;gce-installation&#34;&gt;GCE installation&lt;/h2&gt;

&lt;p&gt;First step, make sure you&amp;rsquo;ve created previously a project in the Google Cloud console. If you don&amp;rsquo;t have the Cloud SDK, you are going to need it. It&amp;rsquo;s quite easy to install following &lt;a href=&#34;https://cloud.google.com/sdk/docs/quickstart-linux&#34;&gt;the Google instructions&lt;/a&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;cd ~/Software
curl -O https://dl.google.com/dl/cloudsdk/channels/rapid/downloads/google-cloud-sdk-138.0.0-linux-x86_64.tar.gz
tar -zxvf google-cloud-sdk-138.0.0-linux-x86_64.tar.gz
rm google-cloud-sdk-138.0.0-linux-x86_64.tar.gz
./google-cloud-sdk/install.sh
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;strong&gt;Note&lt;/strong&gt;: be careful, last command modifies your .bashrc and it may cause problems.&lt;/p&gt;

&lt;p&gt;Now, it&amp;rsquo;s time to log in:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;gcloud init
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;And now, install kubectl, the client to manage kubernetes:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;gcloud components install kubectl
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;launching-the-service&#34;&gt;Launching the service&lt;/h2&gt;

&lt;p&gt;The first step is to create the cluster. It may take some time.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;gcloud container clusters create leanmanager-cluster
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Ensure kubectl can access to the service:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;gcloud auth application-default login
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;And now, it&amp;rsquo;s time to launch the leanmanager image:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;kubectl run leanmanager-node --image=antonmry/leanmanager:latest --env=&amp;quot;LEANMANAGER_TOKEN=$LEANMANAGER_TOKEN&amp;quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; I have an environment variable &lt;code&gt;LEANMANAGER_TOKEN&lt;/code&gt; with the token to authenticate to Slack. The bot automatically connects using Websocket but if you want to expose any service, add &lt;code&gt;--port=8080&lt;/code&gt; to allow access to it. You will need also to create a Load Balancer, the steps are explained &lt;a href=&#34;https://cloud.google.com/container-engine/docs/quickstart&#34;&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id=&#34;clean-the-service&#34;&gt;Clean the service&lt;/h2&gt;

&lt;p&gt;To stop the service and delete the cluster:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;gcloud container clusters delete leanmanager-cluster
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;install-terraform&#34;&gt;Install Terraform&lt;/h2&gt;

&lt;p&gt;Our next step it&amp;rsquo;s going to be to automate all the process. To do it, we&amp;rsquo;ll use &lt;a href=&#34;https://www.terraform.io&#34;&gt;Terraform&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;If you don&amp;rsquo;t have it, first step is download it from &lt;a href=&#34;https://www.terraform.io/downloads.html&#34;&gt;here&lt;/a&gt; and install it. For linux:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;curl -O https://releases.hashicorp.com/terraform/0.8.2/terraform_0.8.2_linux_amd64.zip
unzip terraform_0.8.2_linux_amd64.zip
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Now move it to a folder which is in your PATH, in my case:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;terraform ~/bin/
echo terraform &amp;gt;&amp;gt; ~/bin/.gitignore
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Last command is executed because I&amp;rsquo;ve &lt;code&gt;~/bin&lt;/code&gt; in github but I don&amp;rsquo;t want upload a so big file as &lt;code&gt;terraform&lt;/code&gt; executable.&lt;/p&gt;

&lt;p&gt;Now you should be able to use &lt;code&gt;terraform&lt;/code&gt; in your system. If you&amp;rsquo;ve never used before, it&amp;rsquo;s a good moment to read the &lt;a href=&#34;https://www.terraform.io/intro/getting-started/build.html&#34;&gt;Getting started guide&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id=&#34;download-gke-credentials&#34;&gt;Download GKE credentials&lt;/h2&gt;

&lt;p&gt;Follow these instructions to download the credentials file:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Log into the &lt;a href=&#34;https://console.cloud.google.com&#34;&gt;Google Developers Console&lt;/a&gt; and select a project.&lt;/li&gt;
&lt;li&gt;Click the menu button in the top left corner, and navigate to &amp;ldquo;IAM &amp;amp; Admin&amp;rdquo;, then &amp;ldquo;Service accounts&amp;rdquo;, and finally &amp;ldquo;Create service account&amp;rdquo;.&lt;/li&gt;
&lt;li&gt;Provide a name and ID in the corresponding fields, select &amp;ldquo;Furnish a new private key&amp;rdquo;, and select &amp;ldquo;JSON&amp;rdquo; as the key type.&lt;/li&gt;
&lt;li&gt;Clicking &amp;ldquo;Create&amp;rdquo; will download your credentials.&lt;/li&gt;
&lt;li&gt;Rename it to &lt;code&gt;account.json&lt;/code&gt;. Make sure you don&amp;rsquo;t publish this file, for instance in Github (add it to &lt;code&gt;.gitignore&lt;/code&gt;).&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&#34;create-the-cluster-using-terraform&#34;&gt;Create the cluster using Terraform&lt;/h2&gt;

&lt;p&gt;In the same folder you have your &lt;code&gt;account.json&lt;/code&gt;, create a Terraform file like &lt;code&gt;leanmanager.tf&lt;/code&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;variable &amp;quot;region&amp;quot; {
  default = &amp;quot;europe-west1-d&amp;quot;
}

provider &amp;quot;google&amp;quot; {
  credentials = &amp;quot;${file(&amp;quot;account.json&amp;quot;)}&amp;quot;
  project     = &amp;quot;wwwleanmanagereu&amp;quot;
  region      = &amp;quot;${var.region}&amp;quot;
}

resource &amp;quot;google_container_cluster&amp;quot; &amp;quot;primary&amp;quot; {
  name = &amp;quot;leanmanager-cluster&amp;quot;
  zone = &amp;quot;${var.region}&amp;quot;
  initial_node_count = 1

  master_auth {
    username = &amp;quot;mr.yoda&amp;quot;
    password = &amp;quot;testTest1&amp;quot;
  }

  node_config {
    oauth_scopes = [
      &amp;quot;https://www.googleapis.com/auth/compute&amp;quot;,
      &amp;quot;https://www.googleapis.com/auth/devstorage.read_only&amp;quot;,
      &amp;quot;https://www.googleapis.com/auth/logging.write&amp;quot;,
      &amp;quot;https://www.googleapis.com/auth/monitoring&amp;quot;
    ]
  }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Check what it&amp;rsquo;s going to create:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;terraform plan
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Review the output and if it&amp;rsquo;s ok, launch it!.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;terraform apply
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;If everything goes well, you will see a message like this:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Apply complete! Resources: 1 added, 0 changed, 0 destroyed.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;And you can check it with:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;gcloud container clusters list
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;If you want to access with &lt;code&gt;kubectl&lt;/code&gt; you need to login first:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;gcloud container clusters get-credentials leanmanager-cluster --zone europe-west1-d
kubectl cluster-info
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This step can be added to the &lt;code&gt;leanmanager.tf&lt;/code&gt; inside the &lt;code&gt;resource&lt;/code&gt; block:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;provisioner &amp;quot;local-exec&amp;quot; {
    command = &amp;quot;gcloud container clusters get-credentials ${var.cluster_name} --zone ${google_container_cluster.primary.zone}&amp;quot;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;launch-our-docker-instance&#34;&gt;Launch our Docker instance&lt;/h2&gt;

&lt;p&gt;Once you are logged in with &lt;code&gt;kubectl&lt;/code&gt;, it&amp;rsquo;s exactly the same as before:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;kubectl run leanmanager-node --image=antonmry/leanmanager:latest --env=&amp;quot;LEANMANAGER_TOKEN=$LEANMANAGER_TOKEN&amp;quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;But you can also do it with Terraform adding this snippet in the beginning:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;variable &amp;quot;LEANMANAGER_TOKEN&amp;quot; {
      default = &amp;quot;USE YOUR OWN TOKEN&amp;quot;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;And after the previous &lt;code&gt;local-exec&lt;/code&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;provisioner &amp;quot;local-exec&amp;quot; {
    command = &amp;quot;kubectl run leanmanager-node --image=antonmry/leanmanager:latest --env=LEANMANAGER_TOKEN=${var.LEANMANAGER_TOKEN}&amp;quot;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;And executing terraform passing the variable:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;terraform apply -var LEANMANAGER_TOKEN=$LEANMANAGER_TOKEN
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Other option would be read the variable directly but you have to change the name to fit the terraform requirements and I&amp;rsquo;m using it for other things. More info &lt;a href=&#34;https://www.terraform.io/docs/configuration/variables.html&#34;&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id=&#34;clean-everything&#34;&gt;Clean everything&lt;/h2&gt;

&lt;p&gt;With Terraform is really easy, just:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;terraform destroy
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;not-already-linked-but-useful-resources&#34;&gt;Not already linked but useful resources&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://container-solutions.com/simple-gce-setup-terraform/&#34;&gt;Simple GCE setup Terraform&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/l337ch/terraform-gke&#34;&gt;terraform-gke&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/kelseyhightower/kubestack&#34;&gt;kubestack&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://cloud.google.com/solutions/automated-build-images-with-jenkins-kubernetes&#34;&gt;Automated Image Builds with Jenkins, Packer, and Kubernetes&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>Time to start a Go blog with Hugo</title>
      <link>https://antonmry.github.io/post/first-blog-post-with-hugo/</link>
      <pubDate>Thu, 16 Jun 2016 20:49:50 +0200</pubDate>
      <author>antonmry@galiglobal.com (Ant贸n R. Yuste)</author>
      <guid>https://antonmry.github.io/post/first-blog-post-with-hugo/</guid>
      <description>&lt;p&gt;Well, this is embarrassing. I&amp;rsquo;m launching another blog!. Why?. Some time ago I&amp;rsquo;ve started to write a blog, in the beginning for corporate news but it has become a place where to write or document interesting things I do in my work, most of them related to Java, Groovy and Oracle technologies. The blog is generated with &lt;a href=&#34;http://jbake.org/&#34;&gt;JBake&lt;/a&gt; with the &lt;a href=&#34;https://github.com/antonmry/jbake-gradle-plugin&#34;&gt;gradle plugin&lt;/a&gt;, I like to use related technologies and I&amp;rsquo;m quite happy with the result, but to be honest, I don&amp;rsquo;t write frequently.&lt;/p&gt;

&lt;p&gt;Six months ago I&amp;rsquo;ve started to learn and use &lt;a href=&#34;https://golang.org/&#34;&gt;Go&lt;/a&gt;. I was very impressed with the simplicity of the language and I&amp;rsquo;ve started to read a lot of articles, books, etc., watch videos and develop some projects. I discovered &lt;a href=&#34;https://gohugo.io/&#34;&gt;Hugo&lt;/a&gt;, a site generator similar to JBake but written in Go. I was tempted to migrate my previous blog, but today I&amp;rsquo;m going to continue writing about not Go subjects, so it&amp;rsquo;s simpler to open a new one only for Go, bots, DevOps, concurrency and perfomance. In another post I will write more about Go and why I find it so interesting.&lt;/p&gt;

&lt;p&gt;As the first post, let&amp;rsquo;s see how to configure &lt;a href=&#34;https://gohugo.io/&#34;&gt;Hugo&lt;/a&gt;. I&amp;rsquo;ve to say it was really easy, I really impressed with piece of software. I can compare with other site generators as Jekyll, Hexo or JBake, and I have to say Hugo is my favourite.&lt;/p&gt;

&lt;p&gt;First of all, I&amp;rsquo;ve created a new repo in my Gihub account and cloned it in my laptop:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;git clone git@github.com:antonmry/antonmry.github.io.git
cd antonmry.github.io
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Because I&amp;rsquo;m going to use my github user page, the source code of the page must be in master branch. For your Hugo code, you can have a separate repo or just a different branch. I choose the second option with a branch named source, I prefer it in that way, it&amp;rsquo;s simpler and this is the main difference with the procedure you can find in &lt;a href=&#34;https://gohugo.io/tutorials/github-pages-blog&#34;&gt;the excellent Hugo documentation&lt;/a&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;git checkout -b source
git push -u origin source
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Inside the source code folder, we are going to create a folder linking to the master branch:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;git subtree add --prefix=public git@github.com:antonmry/antonmry.github.io.git master --squash
git subtree pull --prefix=public git@github.com:antonmry/antonmry.github.io.git master
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;It&amp;rsquo;s time to generate the site. First you have to install Hugo, plenty of options in the &lt;a href=&#34;https://gohugo.io/overview/installing/&#34;&gt;the Hugo website&lt;/a&gt;. I&amp;rsquo;ve chosen the Fedora package, updates will be easier.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;hugo new site antonmry.github.io
mv antonmry.github.io/* .
rm -r antonmry.github.io
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Choose your theme, there are very nice options, I&amp;rsquo;ve chosen beatifulhugo:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;cd themes
git clone https://github.com/halogenica/Hugo-BeautifulHugo.git beautifulhugo
cd ..
echo &amp;quot;theme = \&amp;quot;beautifulhugo\&amp;quot;&amp;quot; &amp;gt;&amp;gt; config.toml
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Create your first blog and start the server:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;hugo new post/hugo-site-created.md
hugo server --buildDrafts
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Open in your browser &lt;a href=&#34;http://localhost:1313/&#34;&gt;http://localhost:1313/&lt;/a&gt; and enjoy your first post with Hugo ;-)&lt;/p&gt;

&lt;p&gt;Let&amp;rsquo;s move the post from draft to publised: edit the file content/post/hugo-site-created.md and change the draft line from true to false if exists.&lt;/p&gt;

&lt;p&gt;Now it&amp;rsquo;s time to upload it to Gihub and make it public:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;hugo
git add -A
git commit -m &amp;quot;Initial version&amp;quot;
git push
git subtree push --prefix=public git@github.com:antonmry/antonmry.github.io.git master
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Oh, really, can it be so easy?. Just go to &lt;a href=&#34;https://antonmry.github.io&#34;&gt;https://antonmry.github.io&lt;/a&gt; (or your equivalent site)&lt;/p&gt;

&lt;p&gt;I was thinking in create a travis job to do the publishing in master (I did it before for jbake) but to be honest, this method is simple enough. I&amp;rsquo;ve added to my .bash_alias the last command and that&amp;rsquo;s all I need.&lt;/p&gt;

&lt;p&gt;Enjoy!&lt;/p&gt;

&lt;p&gt;PS: if you do a rebase in &lt;code&gt;source&lt;/code&gt;, you will need to do it a bit more tricky to push to master because you can&amp;rsquo;t use &lt;code&gt;--force&lt;/code&gt; with the &lt;code&gt;subtree&lt;/code&gt; option:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;git push origin `git subtree split --prefix public source`:master --force
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;More info can be found in Stackoverflow &lt;a href=&#34;http://stackoverflow.com/questions/13756055/git-subtree-subtree-up-to-date-but-cant-push&#34;&gt;Git subtree - subtree up-to-date but can&amp;rsquo;t push&lt;/a&gt;.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title></title>
      <link>https://antonmry.github.io/page/about/</link>
      <pubDate>Thu, 16 Jun 2016 18:17:47 +0200</pubDate>
      <author>antonmry@galiglobal.com (Ant贸n R. Yuste)</author>
      <guid>https://antonmry.github.io/page/about/</guid>
      <description>&lt;p&gt;Software Engineer who specializes in Web and VoIP development and DevOps practices. Gopher and open source contributor.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>How to setup your environment for Kubernetes development</title>
      <link>https://antonmry.github.io/post/how-to-develop-in-Kubernetes/</link>
      <pubDate>Sat, 30 Apr 2016 19:12:52 +0200</pubDate>
      <author>antonmry@galiglobal.com (Ant贸n R. Yuste)</author>
      <guid>https://antonmry.github.io/post/how-to-develop-in-Kubernetes/</guid>
      <description>

&lt;p&gt;In this post I&amp;rsquo;m going to show how to create a Kubernetes Development Environment and deploy RestComm (a quite complex software) on it for testing. If you want just deploy RestComm, it&amp;rsquo;s better for you use the &lt;a href=&#34;http://kubernetes.io/docs/getting-started-guides/docker/&#34;&gt;Kubernetes Docker option&lt;/a&gt;, instead of doing all this process.&lt;/p&gt;

&lt;h1 id=&#34;install-go-development-environment&#34;&gt;Install Go Development Environment&lt;/h1&gt;

&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;curl -O https://storage.googleapis.com/golang/go1.6.linux-amd64.tar.gz
tar -zxvf go1.6.linux-amd64.tar.gz
mv go ~/Software/
echo &amp;quot;GOROOT=~/Software/go&amp;quot; &amp;gt;&amp;gt; .bash_profile 
echo &amp;quot;export GOROOT&amp;quot; &amp;gt;&amp;gt; .bash_profile 
echo &amp;quot;PATH=\$GOROOT/bin:\$PATH&amp;quot; &amp;gt;&amp;gt; ~/.bash_profile
echo &amp;quot;export PATH&amp;quot; &amp;gt;&amp;gt; ~/.bash_profile
echo &amp;quot;GOPATH=~/Workspace/Telestax/go_kubernetes&amp;quot; &amp;gt;&amp;gt; ~/.bash_profile
echo &amp;quot;export GOPATH&amp;quot; &amp;gt;&amp;gt; ~/.bash_profile
source ~/.bash_profile
mkdir -p $GOPATH
&lt;/code&gt;&lt;/pre&gt;

&lt;h1 id=&#34;basic-kubernetes-installation&#34;&gt;Basic Kubernetes installation&lt;/h1&gt;

&lt;h2 id=&#34;clone-and-download&#34;&gt;Clone and download&lt;/h2&gt;

&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;mkdir -p $GOPATH/src/k8s.io
cd $GOPATH/src/k8s.io
git clone https://github.com/antonmry/kubernetes.git
cd kubernetes
git remote add upstream &#39;https://github.com/kubernetes/kubernetes.git&#39;
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;build-and-unit-test&#34;&gt;Build and unit test&lt;/h2&gt;

&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;./hack/build-go.sh &amp;amp;&amp;amp; notify-send &amp;quot;Compilation done&amp;quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Note! Integration test take a long time.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;./hack/test-go.sh &amp;amp;&amp;amp; notify-send &amp;quot;Test done&amp;quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;integration-test&#34;&gt;Integration test&lt;/h2&gt;

&lt;p&gt;We need etcd to run the integration test, Docker to the rescue?&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;docker run -d --name etcd quay.io/coreos/etcd:v2.3.3
alias etcdctl=&amp;quot;docker exec etcd /etcdctl&amp;quot;
alias etcd=&amp;quot;docker exec etcd /etcd&amp;quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Nop, it fails because kubernetes look for it in the PATH :-(&lt;/p&gt;

&lt;p&gt;So,&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;curl -O  https://github.com/coreos/etcd/releases/download/v2.3.3/etcd-v2.3.3-linux-amd64.tar.gz 
tar xzvf etcd-v2.3.3-linux-amd64.tar.gz
mv etcd-v2.3.3-linux-amd64/ ~/Software/
echo &amp;quot;PATH=~/Software/etcd-v2.3.3-linux-amd64:\$PATH&amp;quot; &amp;gt;&amp;gt; ~/.bash_profile
echo &amp;quot;export PATH&amp;quot; &amp;gt;&amp;gt; ~./bash_profile
source ~./bash_profile
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;And now, time to test. Be careful, I think it uses your Google Cloud account :-S&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;go run hack/e2e.go -v --build --up --test --down &amp;amp;&amp;amp; notify-send &amp;quot;Integration test done&amp;quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;h1 id=&#34;running-the-restcomm-image&#34;&gt;Running the Restcomm image&lt;/h1&gt;

&lt;h2 id=&#34;creating-and-launching-the-cluster&#34;&gt;Creating and launching the cluster&lt;/h2&gt;

&lt;p&gt;It will ask for sudo permission, you have to be quick, or relaunch.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;hack/local-up-cluster.sh
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Let this terminal open and create a new one (tmux&amp;rsquo;s time?)&lt;/p&gt;

&lt;h2 id=&#34;running-the-container&#34;&gt;Running the container&lt;/h2&gt;

&lt;p&gt;We don&amp;rsquo;t have any container running:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;cluster/kubectl.sh get pods
cluster/kubectl.sh get services
cluster/kubectl.sh get deployments
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Time to launch RestComm:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;curl -O https://gist.githubusercontent.com/antonmry/0ab69e95e61617eb957a79beb25ba30b/raw/c5c2979be63297571968f7db88c27e714e557fca/restcomm_rc.yml
vim restcomm_rc.yml 
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Change STATIC_ADDRESS to your own IP address.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;cluster/kubectl.sh create -f restcomm_rc.yml
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Now we should be able to see our docker instance working, pods and so on.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;cluster/kubectl.sh get services
cluster/kubectl.sh get deployments
cluster/kubectl.sh get pods
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;We have to wait the STATUS pod become running instead of ContainerCreating.&lt;/p&gt;

&lt;p&gt;After that, we can see our RestComm containers running:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;docker images
docker ps
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Once it&amp;rsquo;s running, we can expose the ports to access our instance:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;wget -O https://gist.githubusercontent.com/antonmry/0ab69e95e61617eb957a79beb25ba30b/raw/77c4eea558fcba9a1ad09d9b89221fdbe3a263fe/restcomm_service.yml
vim restcomm_service.yml
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Change externalIPs to your own IP address.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;cluster/kubectl.sh create -f restcomm_service.yml
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;With the following command we can check the status:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;./cluster/kubectl.sh get svc
&lt;/code&gt;&lt;/pre&gt;

&lt;h1 id=&#34;test-restcomm&#34;&gt;Test Restcomm!&lt;/h1&gt;

&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;chromium-browser https://CHANGE_WITH_YOUR_IP/olympus
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Login as alice, call +1234 and you should listen the message ;-)&lt;/p&gt;

&lt;h1 id=&#34;stop-all&#34;&gt;Stop all&lt;/h1&gt;

&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;./cluster/kubectl.sh delete service restcomm-service
./cluster/kubectl.sh delete rc restcomm-core-controller
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;And Ctrl+C in the terminal running the cluster.&lt;/p&gt;

&lt;h1 id=&#34;reference-documentation&#34;&gt;Reference documentation&lt;/h1&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://kubernetes.io/docs/getting-started-guides/scratch/&#34;&gt;Creating a Custom Cluster from Scratch&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/kubernetes/kubernetes/blob/master/docs/devel/development.md&#34;&gt;Kubernetes Development Guide&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://kubernetes.io/docs/getting-started-guides/locally/&#34;&gt;Running Kubernetes Locally with No VM&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/adimania/Restcomm-Docker/blob/master/kubernetes/README.md&#34;&gt;Kubernetes and RestComm by adimania&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
  </channel>
</rss>