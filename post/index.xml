<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Posts on errors.New(&#34;antonmry: blog&#34;)</title>
    <link>https://antonmry.github.io/post/</link>
    <description>Recent content in Posts on errors.New(&#34;antonmry: blog&#34;)</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <managingEditor>antonmry@galiglobal.com (Ant贸n R. Yuste)</managingEditor>
    <webMaster>antonmry@galiglobal.com (Ant贸n R. Yuste)</webMaster>
    <lastBuildDate>Thu, 16 Jun 2016 20:49:50 +0200</lastBuildDate>
    <atom:link href="https://antonmry.github.io/post/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>Time to start a Golang blog with Hugo</title>
      <link>https://antonmry.github.io/post/first-blog-post-with-hugo/</link>
      <pubDate>Thu, 16 Jun 2016 20:49:50 +0200</pubDate>
      <author>antonmry@galiglobal.com (Ant贸n R. Yuste)</author>
      <guid>https://antonmry.github.io/post/first-blog-post-with-hugo/</guid>
      <description>&lt;p&gt;Well, this is embarrassing. I&amp;rsquo;m launching another blog!. Why?. Some time ago I&amp;rsquo;ve started to write a blog, in the beginning for corporate news but it has become a place where to write or document interesting things I do in my work, most of them related to Java, Groovy and Oracle technologies. The blog is generated with &lt;a href=&#34;http://jbake.org/&#34;&gt;JBake&lt;/a&gt; with the &lt;a href=&#34;https://github.com/antonmry/jbake-gradle-plugin&#34;&gt;gradle plugin&lt;/a&gt;, I like to use related technologies and I&amp;rsquo;m quite happy with the result, but to be honest, I don&amp;rsquo;t write frequently.&lt;/p&gt;

&lt;p&gt;Six months ago I&amp;rsquo;ve started to learn and use &lt;a href=&#34;https://golang.org/&#34;&gt;Golang&lt;/a&gt;. I was very impressed with the simplicity of the language and I&amp;rsquo;ve started to read a lot of articles, books, etc., watch videos and develop some projects. I discovered &lt;a href=&#34;https://gohugo.io/&#34;&gt;Hugo&lt;/a&gt;, a site generator similar to JBake but written in Go. I was tempted to migrate my previous blog, but today I&amp;rsquo;m going to continue writing about not Golang subjects, so it&amp;rsquo;s simpler to open a new one only for Golang, DevOps, concurrency and perfomance. In another post I will write more about Go and why I find it so interesting.&lt;/p&gt;

&lt;p&gt;As the first post, let&amp;rsquo;s see how to configure &lt;a href=&#34;https://gohugo.io/&#34;&gt;Hugo&lt;/a&gt;. I&amp;rsquo;ve to say it was really easy, I really impressed with piece of software. I can compare with other site generators as Jekyll, Hexo or JBake, and I have to say Hugo is my favourite.&lt;/p&gt;

&lt;p&gt;First of all, I&amp;rsquo;ve created a new repo in my Gihub account and cloned it in my laptop:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;git clone git@github.com:antonmry/antonmry.github.io.git
cd antonmry.github.io 
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Because I&amp;rsquo;m going to use my github user page, the source code of the page must be in master branch. For your Hugo code, you can have a separate repo or just a different branch. I choose the second option with a branch named source, I prefer it in that way, it&amp;rsquo;s simpler and this is the main difference with the procedure you can find in &lt;a href=&#34;https://gohugo.io/tutorials/github-pages-blog&#34;&gt;the excellent Hugo documentation&lt;/a&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;git checkout -b source
git push -u origin source
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Inside the source code folder, we are going to create a folder linking to the master branch:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;git subtree add --prefix=public git@github.com:antonmry/antonmry.github.io.git master --squash
git subtree pull --prefix=public git@github.com:antonmry/antonmry.github.io.git master
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;It&amp;rsquo;s time to generate the site. First you have to install Hugo, plenty of options in the &lt;a href=&#34;https://gohugo.io/overview/installing/&#34;&gt;the Hugo website&lt;/a&gt;. I&amp;rsquo;ve chosen the Fedora package, updates will be easier.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;hugo new site antonmry.github.io
mv antonmry.github.io/* .
rm -r antonmry.github.io
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Choose your theme, there are very nice options, I&amp;rsquo;ve chosen beatifulhugo:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;cd themes
git clone https://github.com/halogenica/Hugo-BeautifulHugo.git beautifulhugo
cd ..
echo &amp;quot;theme = \&amp;quot;beautifulhugo\&amp;quot;&amp;quot; &amp;gt;&amp;gt; config.toml
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Create your first blog and start the server:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;hugo new post/hugo-site-created.md
hugo server --buildDrafts
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Open in your browser &lt;a href=&#34;http://localhost:1313/&#34;&gt;http://localhost:1313/&lt;/a&gt; and enjoy your first post with Hugo ;-)&lt;/p&gt;

&lt;p&gt;Let&amp;rsquo;s move the post from draft to publised: edit the file content/post/hugo-site-created.md and change the draft line from true to false.&lt;/p&gt;

&lt;p&gt;Now it&amp;rsquo;s time to upload it to Gihub and make it public:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;git add -A
git commit -m &amp;quot;Initial version&amp;quot;
git push
git subtree push --prefix=public git@github.com:antonmry/antonmry.github.io.git master
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Oh, really, can it be so easy?. Just go to &lt;a href=&#34;https://antonmry.github.io&#34;&gt;https://antonmry.github.io&lt;/a&gt; (or your equivalent site)&lt;/p&gt;

&lt;p&gt;I was thinking in create a travis job to do the publishing in master (I did it before for jbake) but to be honest, this method is simple enough. I&amp;rsquo;ve added to my .bash_alias the last command and that&amp;rsquo;s all I need.&lt;/p&gt;

&lt;p&gt;Enjoy!&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>How to setup your environment for Kubernetes development</title>
      <link>https://antonmry.github.io/post/how-to-develop-in-Kubernetes/</link>
      <pubDate>Sat, 30 Apr 2016 19:12:52 +0200</pubDate>
      <author>antonmry@galiglobal.com (Ant贸n R. Yuste)</author>
      <guid>https://antonmry.github.io/post/how-to-develop-in-Kubernetes/</guid>
      <description>

&lt;p&gt;In this post I&amp;rsquo;m going to show how to create a Kubernetes Development Environment and deploy RestComm (a quite complex software) on it for testing. If you want just deploy RestComm, it&amp;rsquo;s better for you use the &lt;a href=&#34;http://kubernetes.io/docs/getting-started-guides/docker/&#34;&gt;Kubernetes Docker option&lt;/a&gt;, instead of doing all this process.&lt;/p&gt;

&lt;h1 id=&#34;install-go-development-environment&#34;&gt;Install Go Development Environment&lt;/h1&gt;

&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;curl -O https://storage.googleapis.com/golang/go1.6.linux-amd64.tar.gz
tar -zxvf go1.6.linux-amd64.tar.gz
mv go ~/Software/
echo &amp;quot;GOROOT=~/Software/go&amp;quot; &amp;gt;&amp;gt; .bash_profile 
echo &amp;quot;export GOROOT&amp;quot; &amp;gt;&amp;gt; .bash_profile 
echo &amp;quot;PATH=\$GOROOT/bin:\$PATH&amp;quot; &amp;gt;&amp;gt; ~/.bash_profile
echo &amp;quot;export PATH&amp;quot; &amp;gt;&amp;gt; ~/.bash_profile
echo &amp;quot;GOPATH=~/Workspace/Telestax/go_kubernetes&amp;quot; &amp;gt;&amp;gt; ~/.bash_profile
echo &amp;quot;export GOPATH&amp;quot; &amp;gt;&amp;gt; ~/.bash_profile
source ~/.bash_profile
mkdir -p $GOPATH
&lt;/code&gt;&lt;/pre&gt;

&lt;h1 id=&#34;basic-kubernetes-installation&#34;&gt;Basic Kubernetes installation&lt;/h1&gt;

&lt;h2 id=&#34;clone-and-download&#34;&gt;Clone and download&lt;/h2&gt;

&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;mkdir -p $GOPATH/src/k8s.io
cd $GOPATH/src/k8s.io
git clone https://github.com/antonmry/kubernetes.git
cd kubernetes
git remote add upstream &#39;https://github.com/kubernetes/kubernetes.git&#39;
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;build-and-unit-test&#34;&gt;Build and unit test&lt;/h2&gt;

&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;./hack/build-go.sh &amp;amp;&amp;amp; notify-send &amp;quot;Compilation done&amp;quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Note! Integration test take a long time.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;./hack/test-go.sh &amp;amp;&amp;amp; notify-send &amp;quot;Test done&amp;quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;integration-test&#34;&gt;Integration test&lt;/h2&gt;

&lt;p&gt;We need etcd to run the integration test, Docker to the rescue?&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;docker run -d --name etcd quay.io/coreos/etcd:v2.3.3
alias etcdctl=&amp;quot;docker exec etcd /etcdctl&amp;quot;
alias etcd=&amp;quot;docker exec etcd /etcd&amp;quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Nop, it fails because kubernetes look for it in the PATH :-(&lt;/p&gt;

&lt;p&gt;So,&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;curl -O  https://github.com/coreos/etcd/releases/download/v2.3.3/etcd-v2.3.3-linux-amd64.tar.gz 
tar xzvf etcd-v2.3.3-linux-amd64.tar.gz
mv etcd-v2.3.3-linux-amd64/ ~/Software/
echo &amp;quot;PATH=~/Software/etcd-v2.3.3-linux-amd64:\$PATH&amp;quot; &amp;gt;&amp;gt; ~/.bash_profile
echo &amp;quot;export PATH&amp;quot; &amp;gt;&amp;gt; ~./bash_profile
source ~./bash_profile
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;And now, time to test. Be careful, I think it uses your Google Cloud account :-S&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;go run hack/e2e.go -v --build --up --test --down &amp;amp;&amp;amp; notify-send &amp;quot;Integration test done&amp;quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;h1 id=&#34;running-the-restcomm-image&#34;&gt;Running the Restcomm image&lt;/h1&gt;

&lt;h2 id=&#34;creating-and-launching-the-cluster&#34;&gt;Creating and launching the cluster&lt;/h2&gt;

&lt;p&gt;It will ask for sudo permission, you have to be quick, or relaunch.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;hack/local-up-cluster.sh
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Let this terminal open and create a new one (tmux&amp;rsquo;s time?)&lt;/p&gt;

&lt;h2 id=&#34;running-the-container&#34;&gt;Running the container&lt;/h2&gt;

&lt;p&gt;We don&amp;rsquo;t have any container running:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;cluster/kubectl.sh get pods
cluster/kubectl.sh get services
cluster/kubectl.sh get deployments
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Time to launch RestComm:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;curl -O https://gist.githubusercontent.com/antonmry/0ab69e95e61617eb957a79beb25ba30b/raw/c5c2979be63297571968f7db88c27e714e557fca/restcomm_rc.yml
vim restcomm_rc.yml 
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Change STATIC_ADDRESS to your own IP address.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;cluster/kubectl.sh create -f restcomm_rc.yml
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Now we should be able to see our docker instance working, pods and so on.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;cluster/kubectl.sh get services
cluster/kubectl.sh get deployments
cluster/kubectl.sh get pods
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;We have to wait the STATUS pod become running instead of ContainerCreating.&lt;/p&gt;

&lt;p&gt;After that, we can see our RestComm containers running:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;docker images
docker ps
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Once it&amp;rsquo;s running, we can expose the ports to access our instance:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;wget -O https://gist.githubusercontent.com/antonmry/0ab69e95e61617eb957a79beb25ba30b/raw/77c4eea558fcba9a1ad09d9b89221fdbe3a263fe/restcomm_service.yml
vim restcomm_service.yml
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Change externalIPs to your own IP address.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;cluster/kubectl.sh create -f restcomm_service.yml
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;With the following command we can check the status:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;./cluster/kubectl.sh get svc
&lt;/code&gt;&lt;/pre&gt;

&lt;h1 id=&#34;test-restcomm&#34;&gt;Test Restcomm!&lt;/h1&gt;

&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;chromium-browser https://CHANGE_WITH_YOUR_IP/olympus
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Login as alice, call +1234 and you should listen the message ;-)&lt;/p&gt;

&lt;h1 id=&#34;stop-all&#34;&gt;Stop all&lt;/h1&gt;

&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;./cluster/kubectl.sh delete service restcomm-service
./cluster/kubectl.sh delete rc restcomm-core-controller
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;And Ctrl+C in the terminal running the cluster.&lt;/p&gt;

&lt;h1 id=&#34;reference-documentation&#34;&gt;Reference documentation&lt;/h1&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://kubernetes.io/docs/getting-started-guides/scratch/&#34;&gt;Creating a Custom Cluster from Scratch&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/kubernetes/kubernetes/blob/master/docs/devel/development.md&#34;&gt;Kubernetes Development Guide&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://kubernetes.io/docs/getting-started-guides/locally/&#34;&gt;Running Kubernetes Locally with No VM&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/adimania/Restcomm-Docker/blob/master/kubernetes/README.md&#34;&gt;Kubernetes and RestComm by adimania&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
  </channel>
</rss>